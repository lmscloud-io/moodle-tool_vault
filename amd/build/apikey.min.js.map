{"version":3,"file":"apikey.min.js","sources":["../src/apikey.js"],"sourcesContent":["// This file is part of plugin tool_vault - https://lmsvault.io\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allows to enter API key\n *\n * @module     tool_vault/apikey\n * @copyright  2023 Marina Glancy\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DynamicForm from 'core_form/dynamicform';\nimport Pending from 'core/pending';\nimport Notification from 'core/notification';\n\nconst SELECTORS = {\n    APIKEY_FORM_CONTAINER: '#getapikey_formplaceholder',\n    APIKEY_IFRAME: '#getapikey_iframe',\n    SIGNIN_BUTTON: '#getapikey_signin',\n    SIGNUP_BUTTON: '#getapikey_signup',\n    ENTER_KEY_BUTTON: '#getapikey_enterapikey',\n};\n\n/**\n * Open form to enter API key\n *\n * @param {String} apikey\n * @param {Boolean} autoSubmit\n */\nconst openApikeyForm = (apikey = '', autoSubmit = false) => {\n    const pendingPromise = new Pending('tool_vault/apikeyform:open');\n    closeLoginSignupModal();\n\n    const formContainer = document.querySelector(SELECTORS.APIKEY_FORM_CONTAINER);\n    const apikeyForm = new DynamicForm(formContainer, '\\\\tool_vault\\\\form\\\\apikey_form');\n\n    // After submitting reresh the page.\n    apikeyForm.addEventListener(apikeyForm.events.FORM_SUBMITTED, () => location.reload());\n\n    apikeyForm.load({apikey})\n        .then(() => {\n            if (autoSubmit) {\n                apikeyForm.submitFormAjax();\n            }\n            return pendingPromise.resolve();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Close form to enter API key\n */\nconst closeApikeyForm = () => {\n    const formContainer = document.querySelector(SELECTORS.APIKEY_FORM_CONTAINER);\n    formContainer.innerHTML = '';\n};\n\n/**\n * Open iframe with the remote login/signup form\n *\n * @param {Event} e\n */\nconst openLoginSignupModal = (e) => {\n    closeApikeyForm();\n\n    const signInButton = e.target;\n    const loginSignupIframe = document.querySelector(SELECTORS.APIKEY_IFRAME);\n    const url = (signInButton && loginSignupIframe) ? signInButton.dataset.target : null;\n\n    loginSignupIframe.src = url;\n    loginSignupIframe.style.display = 'block';\n};\n\n/**\n * Close iframe with the remote login/signup form\n */\nconst closeLoginSignupModal = () => {\n    const loginSignupIframe = document.querySelector(SELECTORS.APIKEY_IFRAME);\n    loginSignupIframe.style.display = 'none';\n    loginSignupIframe.src = 'about:blank';\n};\n\n/**\n * Initialise listeners on the page\n */\nexport const init = () => {\n    const signInButton = document.querySelector(SELECTORS.SIGNIN_BUTTON);\n    const signUpButton = document.querySelector(SELECTORS.SIGNUP_BUTTON);\n    const enterApikeyButton = document.querySelector(SELECTORS.ENTER_KEY_BUTTON);\n    const loginSignupIframe = document.querySelector(SELECTORS.APIKEY_IFRAME);\n    const url = (signInButton && loginSignupIframe) ? signInButton.dataset.target : null;\n\n    if (!url) {\n        return;\n    }\n    const urlHost = url.match(/^(https?:\\/\\/[^/]+)(.*)$/)[1];\n\n    signInButton.onclick = openLoginSignupModal;\n    if (signUpButton) {\n        signUpButton.onclick = openLoginSignupModal;\n    }\n\n    enterApikeyButton.onclick = () => openApikeyForm();\n\n    window.addEventListener(\n        \"message\",\n        (event) => {\n            if (event.origin !== urlHost || !event.data || !(typeof event.data === 'object')) {\n                return;\n            }\n            if (event.data.action === 'apikey') {\n                openApikeyForm(event.data.apikey, true);\n            } else if (event.data.action === 'close') {\n                closeLoginSignupModal();\n            }\n        },\n        false);\n};\n"],"names":["SELECTORS","openApikeyForm","apikey","autoSubmit","pendingPromise","Pending","closeLoginSignupModal","formContainer","document","querySelector","apikeyForm","DynamicForm","addEventListener","events","FORM_SUBMITTED","location","reload","load","then","submitFormAjax","resolve","catch","Notification","exception","openLoginSignupModal","e","innerHTML","signInButton","target","loginSignupIframe","url","dataset","src","style","display","signUpButton","enterApikeyButton","urlHost","match","onclick","window","event","origin","data","action"],"mappings":";;;;;;;wOA2BMA,gCACqB,6BADrBA,wBAEa,oBAFbA,wBAGa,oBAHbA,wBAIa,oBAJbA,2BAKgB,yBAShBC,eAAiB,eAACC,8DAAS,GAAIC,yEAC3BC,eAAiB,IAAIC,iBAAQ,8BACnCC,8BAEMC,cAAgBC,SAASC,cAAcT,iCACvCU,WAAa,IAAIC,qBAAYJ,cAAe,mCAGlDG,WAAWE,iBAAiBF,WAAWG,OAAOC,gBAAgB,IAAMC,SAASC,WAE7EN,WAAWO,KAAK,CAACf,OAAAA,SACZgB,MAAK,KACEf,YACAO,WAAWS,iBAERf,eAAegB,aAEzBC,MAAMC,sBAAaC,YAgBtBC,qBAAwBC,IATJjB,SAASC,cAAcT,iCAC/B0B,UAAY,SAWpBC,aAAeF,EAAEG,OACjBC,kBAAoBrB,SAASC,cAAcT,yBAC3C8B,IAAOH,cAAgBE,kBAAqBF,aAAaI,QAAQH,OAAS,KAEhFC,kBAAkBG,IAAMF,IACxBD,kBAAkBI,MAAMC,QAAU,SAMhC5B,sBAAwB,WACpBuB,kBAAoBrB,SAASC,cAAcT,yBACjD6B,kBAAkBI,MAAMC,QAAU,OAClCL,kBAAkBG,IAAM,6BAMR,WACVL,aAAenB,SAASC,cAAcT,yBACtCmC,aAAe3B,SAASC,cAAcT,yBACtCoC,kBAAoB5B,SAASC,cAAcT,4BAC3C6B,kBAAoBrB,SAASC,cAAcT,yBAC3C8B,IAAOH,cAAgBE,kBAAqBF,aAAaI,QAAQH,OAAS,SAE3EE,iBAGCO,QAAUP,IAAIQ,MAAM,4BAA4B,GAEtDX,aAAaY,QAAUf,qBACnBW,eACAA,aAAaI,QAAUf,sBAG3BY,kBAAkBG,QAAU,IAAMtC,iBAElCuC,OAAO5B,iBACH,WACC6B,QACOA,MAAMC,SAAWL,SAAYI,MAAME,MAAgC,iBAAfF,MAAME,OAGpC,WAAtBF,MAAME,KAAKC,OACX3C,eAAewC,MAAME,KAAKzC,QAAQ,GACL,UAAtBuC,MAAME,KAAKC,QAClBtC,4BAGR"}