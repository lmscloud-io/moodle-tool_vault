{"version":3,"file":"install_addon.min.js","sources":["../src/install_addon.js"],"sourcesContent":["// This file is part of plugin tool_vault - https://lmsvault.io\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Links to install add-on plugins\n *\n * @module     tool_vault/install_addon\n * @copyright  Marina Glancy\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalForm from 'core_form/modalform';\nimport {SELECTORS} from './selectors';\nimport {get_string as getString} from 'core/str';\nimport Notification from 'core/notification';\n\nlet initialised = false;\n\n/**\n * Initialise listeners on the page\n */\nexport const init = () => {\n    if (initialised) {\n        return;\n    }\n    initialised = true;\n\n    document.querySelectorAll(SELECTORS.ADDON_PLUGIN_REGION).forEach(pluginRegionNode => {\n\n        const installButton = pluginRegionNode.dataset.writable ?\n            pluginRegionNode.querySelector(SELECTORS.ADDON_INSTALL_BUTTON) : null;\n\n        installButton?.addEventListener('click', e => {\n            e.preventDefault();\n            if (pluginRegionNode.dataset.isbulk) {\n                openInstallAddonForm(pluginRegionNode.dataset.pluginnames.split(','));\n            } else {\n                openInstallAddonForm([pluginRegionNode.dataset.pluginname]);\n            }\n        });\n\n    });\n\n};\n\nconst getPluginRegion = (pluginname) =>\n    document.querySelector(SELECTORS.ADDON_PLUGIN_REGION + `[data-pluginname=\"${pluginname}\"]`);\n\n/**\n * Open form to enter API key\n *\n * @param {Array} pluginnames\n */\nconst openInstallAddonForm = (pluginnames) => {\n\n    const args = [];\n    const sources = {};\n    for (let pluginname of pluginnames) {\n        const pluginRegion = getPluginRegion(pluginname);\n        if (pluginRegion?.dataset.writable) {\n            const source = pluginRegion.querySelector(SELECTORS.ADDON_VERSION_RADIO + ':checked')?.value;\n            if (`${source}` !== '') {\n                args.push({pluginname, source});\n                sources[pluginname] = source;\n            }\n        }\n    }\n\n    if (!args.length) {\n        return;\n    }\n\n    const modalForm = new ModalForm({\n        modalConfig: {\n            title: getString('addonplugins_installdialoguetitle', 'tool_vault'),\n        },\n        formClass: '\\\\tool_vault\\\\form\\\\install_plugin_form',\n        args: {plugins: JSON.stringify(args)},\n        saveButtonText: getString('continue', 'moodle')\n    });\n\n    // Show a toast notification when the form is submitted.\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, event => {\n        for (let pluginname of event.detail.installed) {\n            const pluginRegionNode = getPluginRegion(pluginname);\n            pluginRegionNode.querySelector(SELECTORS.ADDON_INSTALL_BUTTON)?.remove();\n            pluginRegionNode.querySelectorAll(SELECTORS.ADDON_VERSION_RADIO).forEach(el => {\n                if (el.value !== sources[pluginname]) {\n                    el.closest('label')?.classList.add('dimmed_text');\n                }\n                el.remove();\n            });\n        }\n\n        return Notification.alert(\n            getString('addonplugins_installdialoguetitle', 'tool_vault'),\n            event.detail.output\n        );\n    });\n\n    modalForm.show();\n};\n"],"names":["initialised","document","querySelectorAll","SELECTORS","ADDON_PLUGIN_REGION","forEach","pluginRegionNode","installButton","dataset","writable","querySelector","ADDON_INSTALL_BUTTON","addEventListener","e","preventDefault","isbulk","openInstallAddonForm","pluginnames","split","pluginname","getPluginRegion","args","sources","pluginRegion","source","ADDON_VERSION_RADIO","_pluginRegion$querySe","value","push","length","modalForm","ModalForm","modalConfig","title","formClass","plugins","JSON","stringify","saveButtonText","events","FORM_SUBMITTED","event","detail","installed","remove","el","closest","classList","add","Notification","alert","output","show"],"mappings":";;;;;;;wLA4BIA,aAAc,gBAKE,KACZA,cAGJA,aAAc,EAEdC,SAASC,iBAAiBC,qBAAUC,qBAAqBC,SAAQC,yBAEvDC,cAAgBD,iBAAiBE,QAAQC,SAC3CH,iBAAiBI,cAAcP,qBAAUQ,sBAAwB,KAErEJ,MAAAA,eAAAA,cAAeK,iBAAiB,SAASC,IACrCA,EAAEC,iBACER,iBAAiBE,QAAQO,OACzBC,qBAAqBV,iBAAiBE,QAAQS,YAAYC,MAAM,MAEhEF,qBAAqB,CAACV,iBAAiBE,QAAQW,2BAQzDC,gBAAmBD,YACrBlB,SAASS,cAAcP,qBAAUC,gDAA2Ce,kBAO1EH,qBAAwBC,oBAEpBI,KAAO,GACPC,QAAU,OACX,IAAIH,cAAcF,YAAa,OAC1BM,aAAeH,gBAAgBD,eACjCI,MAAAA,cAAAA,aAAcf,QAAQC,SAAU,iCAC1Be,qCAASD,aAAab,cAAcP,qBAAUsB,oBAAsB,oDAA3DC,sBAAwEC,MACnE,KAAhB,UAAGH,UACHH,KAAKO,KAAK,CAACT,WAAAA,WAAYK,OAAAA,SACvBF,QAAQH,YAAcK,aAK7BH,KAAKQ,oBAIJC,UAAY,IAAIC,mBAAU,CAC5BC,YAAa,CACTC,OAAO,mBAAU,oCAAqC,eAE1DC,UAAW,0CACXb,KAAM,CAACc,QAASC,KAAKC,UAAUhB,OAC/BiB,gBAAgB,mBAAU,WAAY,YAI1CR,UAAUlB,iBAAiBkB,UAAUS,OAAOC,gBAAgBC,YACnD,IAAItB,cAAcsB,MAAMC,OAAOC,UAAW,iCACrCrC,iBAAmBc,gBAAgBD,0CACzCb,iBAAiBI,cAAcP,qBAAUQ,8EAAuBiC,SAChEtC,iBAAiBJ,iBAAiBC,qBAAUsB,qBAAqBpB,SAAQwC,qBACjEA,GAAGlB,QAAUL,QAAQH,kCACrB0B,GAAGC,QAAQ,6CAAUC,UAAUC,IAAI,gBAEvCH,GAAGD,mBAIJK,sBAAaC,OAChB,mBAAU,oCAAqC,cAC/CT,MAAMC,OAAOS,WAIrBrB,UAAUsB"}