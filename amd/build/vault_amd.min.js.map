{"version":3,"file":"vault_amd.min.js","sources":["../src/vault_amd.js"],"sourcesContent":["// This file is part of plugin tool_vault - https://lmsvault.io\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module vault_amd\n *\n * @module     tool_vault/vault_amd\n * @copyright  2024 Marina Glancy\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'core/modal_factory',\n    'core/modal_events',\n    'core/templates',\n    'core/notification',\n    'core/str',\n    'core/pending',\n    'core/fragment'\n], function(ModalFactory, ModalEvents, Templates, Notification, Str, Pending, Fragment) {\n\n    var SELECTORS = {\n        START_BACKUP: 'form[data-action=\"startbackup\"]',\n        START_DRYRUN: 'form[data-action=\"startdryrun\"]',\n        START_RESTORE: 'form[data-action=\"startrestore\"]',\n    };\n\n    var submitForm = function(backupForm, modal) {\n        var popupBody = modal.getBody()[0];\n        var fields = ['passphrase', 'description'];\n        for (var i in fields) {\n            var el1 = popupBody.querySelector('input[name=\"' + fields[i] + '\"]'),\n                el2 = backupForm.querySelector('input[name=\"' + fields[i] + '\"]');\n            if (el1 && el2) {\n                el2.value = el1.value;\n            }\n        }\n        backupForm.setAttribute('action', backupForm.getAttribute('data-url'));\n        backupForm.submit();\n    };\n\n    /**\n     * Loads a fragment with a popup showing a spinner while the fragment is loading.\n     * In case of an error, the error message is shown in the same popup.\n     *\n     * @param {String} title\n     * @param {String} tempBody\n     * @param {String} fragmentName\n     * @param {Number} contextid\n     * @param {Object} args\n     * @returns {Promise}\n     */\n    var loadFragmentWithPopup = function(title, tempBody, fragmentName, contextid, args) {\n        var activeModal = null;\n        return ModalFactory.create({\n            type: ModalFactory.types.CANCEL,\n            title: title,\n            body: tempBody\n        })\n        .then(function(res) {\n            activeModal = res;\n            activeModal.show();\n            return Fragment.loadFragment('tool_vault', fragmentName, contextid, args);\n        })\n        .then(function(fragment) {\n            activeModal.destroy();\n            return fragment;\n        })\n        .catch(function(e) {\n            if (activeModal) {\n                activeModal.setBody(e.message);\n            } else {\n                Notification.exception(e);\n            }\n        });\n    };\n\n    var x = function(contextid) {\n        var title, tempBody, saveButtonText;\n        return Str.get_strings([\n            {key: 'startbackup', component: 'tool_vault'},\n            {key: 'pleasewait', component: 'tool_vault'},\n            {key: 'startbackup', component: 'tool_vault'}\n        ])\n        .then(function(s) {\n            title = s[0];\n            tempBody = s[1];\n            saveButtonText = s[2];\n            return loadFragmentWithPopup(title, tempBody, 'start_backup', contextid);\n        })\n        .then(function(fragment) {\n            if (!fragment) {\n                return null;\n            }\n            return ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: title,\n                body: fragment,\n                buttons: {save: saveButtonText},\n                removeOnClose: true\n            });\n        });\n    };\n\n    /**\n     * Register listener for \"start backup\" button\n     */\n    var initStartBackup = function() {\n        var backupForm = document.querySelector(SELECTORS.START_BACKUP);\n        if (!backupForm) {\n            return;\n        }\n        var contextid = backupForm.getAttribute('data-contextid');\n        backupForm.addEventListener('submit', async(event) => {\n            event.preventDefault();\n            var pendingPromise = new Pending('tool/vault:startBackupPopup');\n            x(contextid)\n            .then(function(modal) {\n                if (modal) {\n                    modal.show();\n\n                    modal.getRoot().on(ModalEvents.save, () => submitForm(backupForm, modal));\n                    modal.getRoot().on(ModalEvents.cancel, () => modal.hide());\n                }\n                pendingPromise.resolve();\n                return null;\n            })\n            .catch(function(e) {\n                Notification.exception(e);\n                pendingPromise.resolve();\n            });\n        });\n    };\n\n    var initStartDryRun = function(backupkey) {\n        var dryrunForm = document.querySelector(SELECTORS.START_DRYRUN + `[data-backupkey=\"${backupkey}\"]`);\n        if (!dryrunForm) {\n            return;\n        }\n        dryrunForm.addEventListener('submit', event => {\n            event.preventDefault();\n            ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: Str.get_string('startdryrun', 'tool_vault'),\n                body: Templates.render('tool_vault/start_restore_popup',\n                    {dryrun: 1, encrypted: parseInt(dryrunForm.getAttribute('data-encrypted'))}),\n                buttons: {save: Str.get_string('startdryrun', 'tool_vault')},\n                removeOnClose: true\n            })\n                .then(function(modal) {\n                    modal.show();\n\n                    modal.getRoot().on(ModalEvents.save, () => submitForm(dryrunForm, modal));\n                    modal.getRoot().on(ModalEvents.cancel, () => modal.hide());\n\n                    return modal;\n                })\n                .catch(Notification.exception);\n        });\n    };\n\n    var initStartRestore = function(backupkey) {\n        var restoreForm = document.querySelector(SELECTORS.START_RESTORE + `[data-backupkey=\"${backupkey}\"]`);\n        if (!restoreForm) {\n            return;\n        }\n        restoreForm.addEventListener('submit', event => {\n            event.preventDefault();\n            ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: Str.get_string('startrestore', 'tool_vault'),\n                body: Templates.render('tool_vault/start_restore_popup',\n                    {dryrun: 0, encrypted: parseInt(restoreForm.getAttribute('data-encrypted'))}),\n                buttons: {save: Str.get_string('startrestore', 'tool_vault')},\n                removeOnClose: true\n            })\n                .then(function(modal) {\n                    modal.show();\n\n                    modal.getRoot().on(ModalEvents.save, () => submitForm(restoreForm, modal));\n                    modal.getRoot().on(ModalEvents.cancel, () => modal.hide());\n\n                    return modal;\n                })\n                .catch(Notification.exception);\n        });\n    };\n\n    var initCollapseExpandBackupLogs = function() {\n        var logslong = document.querySelector(`[data-vault-purpose=\"logslong\"]`);\n        var logsshort = document.querySelector(`[data-vault-purpose=\"logsshort\"]`);\n        if (logslong && logsshort) {\n            logslong.querySelector(`[data-vault-purpose=\"togglelogs\"]`).addEventListener('click', event => {\n                event.preventDefault();\n                logsshort.style.display = 'block';\n                logslong.style.display = 'none';\n            });\n            logsshort.querySelector(`[data-vault-purpose=\"togglelogs\"]`).addEventListener('click', event => {\n                event.preventDefault();\n                logsshort.style.display = 'none';\n                logslong.style.display = 'block';\n            });\n        }\n        return false;\n    };\n\n\n    return {\n        'initStartBackup': initStartBackup,\n        'initStartDryRun': initStartDryRun,\n        'initStartRestore': initStartRestore,\n        'initCollapseExpandBackupLogs': initCollapseExpandBackupLogs\n    };\n});\n"],"names":["define","ModalFactory","ModalEvents","Templates","Notification","Str","Pending","Fragment","SELECTORS","submitForm","backupForm","modal","popupBody","getBody","fields","i","el1","querySelector","el2","value","setAttribute","getAttribute","submit","x","contextid","title","tempBody","saveButtonText","get_strings","key","component","then","s","fragmentName","args","activeModal","create","type","types","CANCEL","body","res","show","loadFragment","fragment","destroy","catch","e","setBody","message","exception","loadFragmentWithPopup","SAVE_CANCEL","buttons","save","removeOnClose","document","addEventListener","event","preventDefault","pendingPromise","getRoot","on","cancel","hide","resolve","backupkey","dryrunForm","get_string","render","dryrun","encrypted","parseInt","restoreForm","logslong","logsshort","style","display"],"mappings":"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"}