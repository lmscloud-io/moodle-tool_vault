{"version":3,"file":"vault.min.js","sources":["../src/vault.js"],"sourcesContent":["// This file is part of plugin tool_vault - https://lmsvault.io\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript events for the `tool_vault` subsystem.\n *\n * @module tool_vault/vault\n * @copyright 2022 Marina Glancy\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport Pending from 'core/pending';\nimport ModalForm from 'core_form/modalform';\n\nconst SELECTORS = {\n    START_BACKUP: '[data-action=\"startbackup\"]',\n    START_DRYRUN: 'form[data-action=\"startdryrun\"]',\n    START_RESTORE: 'form[data-action=\"startrestore\"]',\n    RESUME_RESTORE: 'form[data-action=\"resumerestore\"]',\n};\n\nconst submitForm = (backupForm, modal) => {\n    const popupBody = modal.getBody()[0];\n    for (let i of ['passphrase', 'description', 'bucket', 'expiredays']) {\n        const el1 = popupBody.querySelector(`[name=\"${i}\"]`),\n            el2 = backupForm.querySelector(`input[name=\"${i}\"]`);\n        if (el1 && el2) {\n            el2.value = el1.value;\n        }\n    }\n    backupForm.setAttribute('action', backupForm.getAttribute('data-url'));\n    backupForm.submit();\n};\n\n/**\n * Register listener for \"start backup\" button\n */\nexport const initStartBackup = () => {\n    const startBackupButton = document.querySelector(SELECTORS.START_BACKUP);\n    if (!startBackupButton) {\n        return;\n    }\n    startBackupButton.addEventListener('click', async(event) => {\n        event.preventDefault();\n        const pendingPromise = new Pending('tool/vault:startBackupPopup');\n        const [title, tempBody, saveButtonText] = await getStrings([\n            {key: 'startbackup', component: 'tool_vault'},\n            {key: 'pleasewait', component: 'tool_vault'},\n            {key: 'startbackup', component: 'tool_vault'}\n        ]);\n\n        const modalForm = new ModalForm({\n            formClass: 'tool_vault\\\\form\\\\start_backup_form',\n            modalConfig: {title, body: tempBody},\n            saveButtonText: saveButtonText,\n            args: {},\n            returnFocus: startBackupButton,\n        });\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (c) => {\n            window.location.href = c.detail;\n        });\n        modalForm.addEventListener(modalForm.events.LOADED, () => {\n            const button = modalForm.modal.getFooter().find(\"[data-action='save']\");\n            if (button) {\n                button.addClass('hidden');\n                modalForm.modal.getRoot().on(ModalEvents.bodyRendered, () =>\n                    setTimeout(() => button.removeClass('hidden'), 500));\n            }\n        });\n        await modalForm.show();\n        pendingPromise.resolve();\n    });\n};\n\nexport const initStartDryRun = (backupkey) => {\n    const dryrunForm = document.querySelector(SELECTORS.START_DRYRUN + `[data-backupkey=\"${backupkey}\"]`);\n    if (!dryrunForm) {\n        return;\n    }\n    dryrunForm.addEventListener('submit', event => {\n        event.preventDefault();\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: getString('startdryrun', 'tool_vault'),\n            body: Templates.render('tool_vault/start_restore_popup',\n                {dryrun: 1, encrypted: parseInt(dryrunForm.getAttribute('data-encrypted'))}),\n            buttons: {save: getString('startdryrun', 'tool_vault')},\n            removeOnClose: true\n        })\n            .then(function(modal) {\n                modal.show();\n\n                modal.getRoot().on(ModalEvents.save, () => submitForm(dryrunForm, modal));\n                modal.getRoot().on(ModalEvents.cancel, () => modal.hide());\n\n                return modal;\n            })\n            .catch(Notification.exception);\n    });\n};\n\nexport const initStartRestore = (backupkey) => {\n    const restoreForm = document.querySelector(SELECTORS.START_RESTORE + `[data-backupkey=\"${backupkey}\"]`);\n    if (!restoreForm) {\n        return;\n    }\n    restoreForm.addEventListener('submit', event => {\n        event.preventDefault();\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: getString('startrestore', 'tool_vault'),\n            body: Templates.render('tool_vault/start_restore_popup',\n                {dryrun: 0, encrypted: parseInt(restoreForm.getAttribute('data-encrypted'))}),\n            buttons: {save: getString('startrestore', 'tool_vault')},\n            removeOnClose: true\n        })\n            .then(function(modal) {\n                modal.show();\n\n                modal.getRoot().on(ModalEvents.save, () => submitForm(restoreForm, modal));\n                modal.getRoot().on(ModalEvents.cancel, () => modal.hide());\n\n                return modal;\n            })\n            .catch(Notification.exception);\n    });\n};\n\nexport const initResumeRestore = (restoreid) => {\n    const restoreForm = document.querySelector(SELECTORS.RESUME_RESTORE + `[data-restoreid=\"${restoreid}\"]`);\n    if (!restoreForm) {\n        return;\n    }\n    restoreForm.addEventListener('submit', event => {\n        event.preventDefault();\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: getString('resumerestore', 'tool_vault'),\n            body: Templates.render('tool_vault/start_restore_popup',\n                {dryrun: 0, resume: 1, encrypted: parseInt(restoreForm.getAttribute('data-encrypted'))}),\n            buttons: {save: getString('resume', 'tool_vault')},\n            removeOnClose: true\n        })\n            .then(function(modal) {\n                modal.show();\n\n                modal.getRoot().on(ModalEvents.save, () => submitForm(restoreForm, modal));\n                modal.getRoot().on(ModalEvents.cancel, () => modal.hide());\n\n                return modal;\n            })\n            .catch(Notification.exception);\n    });\n};\n\nexport const initCollapseExpandBackupLogs = () => {\n    const logslong = document.querySelector(`[data-vault-purpose=\"logslong\"]`);\n    const logsshort = document.querySelector(`[data-vault-purpose=\"logsshort\"]`);\n    if (logslong && logsshort) {\n        logslong.querySelector(`[data-vault-purpose=\"togglelogs\"]`).addEventListener('click', event => {\n            event.preventDefault();\n            logsshort.style.display = 'block';\n            logslong.style.display = 'none';\n        });\n        logsshort.querySelector(`[data-vault-purpose=\"togglelogs\"]`).addEventListener('click', event => {\n            event.preventDefault();\n            logsshort.style.display = 'none';\n            logslong.style.display = 'block';\n        });\n    }\n    return false;\n};\n"],"names":["SELECTORS","submitForm","backupForm","modal","popupBody","getBody","i","el1","querySelector","el2","value","setAttribute","getAttribute","submit","startBackupButton","document","addEventListener","async","event","preventDefault","pendingPromise","Pending","title","tempBody","saveButtonText","key","component","modalForm","ModalForm","formClass","modalConfig","body","args","returnFocus","events","FORM_SUBMITTED","c","window","location","href","detail","LOADED","button","getFooter","find","addClass","getRoot","on","ModalEvents","bodyRendered","setTimeout","removeClass","show","resolve","backupkey","dryrunForm","create","type","ModalFactory","types","SAVE_CANCEL","Templates","render","dryrun","encrypted","parseInt","buttons","save","removeOnClose","then","cancel","hide","catch","Notification","exception","restoreForm","restoreid","resume","logslong","logsshort","style","display"],"mappings":"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"}