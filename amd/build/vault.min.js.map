{"version":3,"file":"vault.min.js","sources":["../src/vault.js"],"sourcesContent":["\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\n//import Notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\n//import {add as addToast} from 'core/toast';\n\nconst SELECTORS = {\n    START_BACKUP: 'form[data-action=\"startbackup\"]',\n    START_DRYRUN: 'form[data-action=\"startdryrun\"]',\n    START_RESTORE: 'form[data-action=\"startrestore\"]',\n};\n\nconst submitForm = (backupForm, modal) => {\n    const popupBody = modal.getBody()[0];\n    for (let i of ['passphrase', 'description']) {\n        const el1 = popupBody.querySelector(`input[name=\"${i}\"]`),\n            el2 = backupForm.querySelector(`input[name=\"${i}\"]`);\n        if (el1 && el2) {\n            el2.value = el1.value;\n        }\n    }\n    backupForm.setAttribute('action', backupForm.getAttribute('data-url'));\n    backupForm.submit();\n};\n\n/**\n * Register listener for \"start backup\" button\n */\nexport const initStartBackup = () => {\n    const backupForm = document.querySelector(SELECTORS.START_BACKUP);\n    if (!backupForm) {\n        return;\n    }\n    backupForm.addEventListener('submit', event => {\n        event.preventDefault();\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: getString('startbackup', 'tool_vault'),\n            body: Templates.render('tool_vault/start_backup_popup',\n                {description: backupForm.querySelector('input[name=\"description\"]').value}),\n            buttons: {save: getString('startbackup', 'tool_vault')},\n            removeOnClose: true\n        })\n            .then(function(modal) {\n                modal.show();\n\n                modal.getRoot().on(ModalEvents.save, () => submitForm(backupForm, modal));\n                modal.getRoot().on(ModalEvents.cancel, () => modal.hide());\n\n                return modal;\n            });\n    });\n};\n\nexport const initStartDryRun = (backupkey) => {\n    const dryrunForm = document.querySelector(SELECTORS.START_DRYRUN + `[data-backupkey=\"${backupkey}\"]`);\n    if (!dryrunForm) {\n        return;\n    }\n    dryrunForm.addEventListener('submit', event => {\n        event.preventDefault();\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: getString('startdryrun', 'tool_vault'),\n            body: Templates.render('tool_vault/start_restore_popup',\n                {dryrun: 1, encrypted: parseInt(dryrunForm.getAttribute('data-encrypted'))}),\n            buttons: {save: getString('startdryrun', 'tool_vault')},\n            removeOnClose: true\n        })\n            .then(function(modal) {\n                modal.show();\n\n                modal.getRoot().on(ModalEvents.save, () => submitForm(dryrunForm, modal));\n                modal.getRoot().on(ModalEvents.cancel, () => modal.hide());\n\n                return modal;\n            });\n    });\n};\n\nexport const initStartRestore = (backupkey) => {\n    const restoreForm = document.querySelector(SELECTORS.START_RESTORE + `[data-backupkey=\"${backupkey}\"]`);\n    if (!restoreForm) {\n        return;\n    }\n    restoreForm.addEventListener('submit', event => {\n        event.preventDefault();\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: getString('startrestore', 'tool_vault'),\n            body: Templates.render('tool_vault/start_restore_popup',\n                {dryrun: 0, encrypted: parseInt(restoreForm.getAttribute('data-encrypted'))}),\n            buttons: {save: getString('startrestore', 'tool_vault')},\n            removeOnClose: true\n        })\n            .then(function(modal) {\n                modal.show();\n\n                modal.getRoot().on(ModalEvents.save, () => submitForm(restoreForm, modal));\n                modal.getRoot().on(ModalEvents.cancel, () => modal.hide());\n\n                return modal;\n            });\n    });\n};\n"],"names":["SELECTORS","submitForm","backupForm","modal","popupBody","getBody","i","el1","querySelector","el2","value","setAttribute","getAttribute","submit","document","addEventListener","event","preventDefault","create","type","ModalFactory","types","SAVE_CANCEL","title","body","Templates","render","description","buttons","save","removeOnClose","then","show","getRoot","on","ModalEvents","cancel","hide","backupkey","dryrunForm","dryrun","encrypted","parseInt","restoreForm"],"mappings":"uiBASMA,uBACY,kCADZA,uBAEY,kCAFZA,wBAGa,mCAGbC,WAAa,CAACC,WAAYC,eACtBC,UAAYD,MAAME,UAAU,OAC7B,IAAIC,IAAK,CAAC,aAAc,eAAgB,OACnCC,IAAMH,UAAUI,oCAA6BF,SAC/CG,IAAMP,WAAWM,oCAA6BF,SAC9CC,KAAOE,MACPA,IAAIC,MAAQH,IAAIG,OAGxBR,WAAWS,aAAa,SAAUT,WAAWU,aAAa,aAC1DV,WAAWW,mCAMgB,WACrBX,WAAaY,SAASN,cAAcR,wBACrCE,YAGLA,WAAWa,iBAAiB,UAAUC,QAClCA,MAAMC,wCACOC,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,YACzBC,OAAO,mBAAU,cAAe,cAChCC,KAAMC,mBAAUC,OAAO,gCACnB,CAACC,YAAazB,WAAWM,cAAc,6BAA6BE,QACxEkB,QAAS,CAACC,MAAM,mBAAU,cAAe,eACzCC,eAAe,IAEdC,MAAK,SAAS5B,cACXA,MAAM6B,OAEN7B,MAAM8B,UAAUC,GAAGC,sBAAYN,MAAM,IAAM5B,WAAWC,WAAYC,SAClEA,MAAM8B,UAAUC,GAAGC,sBAAYC,QAAQ,IAAMjC,MAAMkC,SAE5ClC,sCAKSmC,kBACtBC,WAAazB,SAASN,cAAcR,kDAA6CsC,iBAClFC,YAGLA,WAAWxB,iBAAiB,UAAUC,QAClCA,MAAMC,wCACOC,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,YACzBC,OAAO,mBAAU,cAAe,cAChCC,KAAMC,mBAAUC,OAAO,iCACnB,CAACc,OAAQ,EAAGC,UAAWC,SAASH,WAAW3B,aAAa,qBAC5DgB,QAAS,CAACC,MAAM,mBAAU,cAAe,eACzCC,eAAe,IAEdC,MAAK,SAAS5B,cACXA,MAAM6B,OAEN7B,MAAM8B,UAAUC,GAAGC,sBAAYN,MAAM,IAAM5B,WAAWsC,WAAYpC,SAClEA,MAAM8B,UAAUC,GAAGC,sBAAYC,QAAQ,IAAMjC,MAAMkC,SAE5ClC,uCAKUmC,kBACvBK,YAAc7B,SAASN,cAAcR,mDAA8CsC,iBACpFK,aAGLA,YAAY5B,iBAAiB,UAAUC,QACnCA,MAAMC,wCACOC,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,YACzBC,OAAO,mBAAU,eAAgB,cACjCC,KAAMC,mBAAUC,OAAO,iCACnB,CAACc,OAAQ,EAAGC,UAAWC,SAASC,YAAY/B,aAAa,qBAC7DgB,QAAS,CAACC,MAAM,mBAAU,eAAgB,eAC1CC,eAAe,IAEdC,MAAK,SAAS5B,cACXA,MAAM6B,OAEN7B,MAAM8B,UAAUC,GAAGC,sBAAYN,MAAM,IAAM5B,WAAW0C,YAAaxC,SACnEA,MAAM8B,UAAUC,GAAGC,sBAAYC,QAAQ,IAAMjC,MAAMkC,SAE5ClC"}